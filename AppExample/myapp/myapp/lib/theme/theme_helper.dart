import 'dart:ui';
import 'package:flutter/material.dart';
import '../../core/app_export.dart';

String _appTheme = "primary";

/// Helper class for managing themes and colors.
class ThemeHelper {
  // A map of custom color themes supported by the app
  Map<String, PrimaryColors> _supportedCustomColor = {
    'primary': PrimaryColors()
  };

// A map of color schemes supported by the app
  Map<String, ColorScheme> _supportedColorScheme = {
    'primary': ColorSchemes.primaryColorScheme
  };

  /// Changes the app theme to [_newTheme].
  void changeTheme(String _newTheme) {
    _appTheme = _newTheme;
  }

  /// Returns the primary colors for the current theme.
  PrimaryColors _getThemeColors() {
    //throw exception to notify given theme is not found or not generated by the generator
    if (!_supportedCustomColor.containsKey(_appTheme)) {
      throw Exception(
          "$_appTheme is not found.Make sure you have added this theme class in JSON Try running flutter pub run build_runner");
    }
    //return theme from map

    return _supportedCustomColor[_appTheme] ?? PrimaryColors();
  }

  /// Returns the current theme data.
  ThemeData _getThemeData() {
    //throw exception to notify given theme is not found or not generated by the generator
    if (!_supportedColorScheme.containsKey(_appTheme)) {
      throw Exception(
          "$_appTheme is not found.Make sure you have added this theme class in JSON Try running flutter pub run build_runner");
    }
    //return theme from map

    var colorScheme =
        _supportedColorScheme[_appTheme] ?? ColorSchemes.primaryColorScheme;
    return ThemeData(
      colorScheme: colorScheme,
      elevatedButtonTheme: ElevatedButtonThemeData(
        style: ElevatedButton.styleFrom(
          backgroundColor: colorScheme.primary,
          shape: RoundedRectangleBorder(
            borderRadius: BorderRadius.circular(
              24,
            ),
          ),
        ),
      ),
      textTheme: TextTheme(
        bodyLarge: TextStyle(
          color: appTheme.black900,
          fontSize: getFontSize(
            18,
          ),
          fontFamily: 'Lato',
          fontWeight: FontWeight.w400,
        ),
        bodyMedium: TextStyle(
          color: appTheme.redA700.withOpacity(0.59),
          fontSize: getFontSize(
            14,
          ),
          fontFamily: 'Noto Sans',
          fontWeight: FontWeight.w400,
        ),
        titleSmall: TextStyle(
          color: colorScheme.errorContainer,
          fontSize: getFontSize(
            14,
          ),
          fontFamily: 'Inter',
          fontWeight: FontWeight.w500,
        ),
        headlineMedium: TextStyle(
          color: colorScheme.onPrimary,
          fontSize: getFontSize(
            28,
          ),
          fontFamily: 'Lato',
          fontWeight: FontWeight.w700,
        ),
        titleMedium: TextStyle(
          color: colorScheme.primaryContainer,
          fontSize: getFontSize(
            16,
          ),
          fontFamily: 'Inter',
          fontWeight: FontWeight.w800,
        ),
        headlineSmall: TextStyle(
          color: colorScheme.onErrorContainer,
          fontSize: getFontSize(
            24,
          ),
          fontFamily: 'Lato',
          fontWeight: FontWeight.w700,
        ),
        displaySmall: TextStyle(
          color: appTheme.gray300,
          fontSize: getFontSize(
            35,
          ),
          fontFamily: 'Megrim',
          fontWeight: FontWeight.w500,
        ),
      ),
      visualDensity: VisualDensity.standard,
    );
  }

  /// Returns the primary colors for the current theme.
  PrimaryColors themeColor() => _getThemeColors();

  /// Returns the current theme data.
  ThemeData themeData() => _getThemeData();
}

/// Class containing the supported color schemes.
class ColorSchemes {
  static final primaryColorScheme = ColorScheme.light(
    background: Color(0XFF081E91),
    error: Color(0XFF121212),
    errorContainer: Color(0XFF4B4B4B),
    inversePrimary: Color(0XFF081E91),
    inverseSurface: Color(0XFF121212),
    onBackground: Color(0X7FC4C4C4),
    onError: Color(0XFF7B7B7B),
    onErrorContainer: Color(0XFF040404),
    onInverseSurface: Color(0XFF7B7B7B),
    onPrimary: Color(0XFF121212),
    onPrimaryContainer: Color(0X7FC4C4C4),
    onSecondary: Color(0X7FC4C4C4),
    onSecondaryContainer: Color(0XFF121212),
    onSurface: Color(0X7FC4C4C4),
    onSurfaceVariant: Color(0XFF121212),
    onTertiary: Color(0X7FC4C4C4),
    onTertiaryContainer: Color(0XFF121212),
    outline: Color(0XFF121212),
    outlineVariant: Color(0XFF081E91),
    primary: Color(0XFF6E84F7),
    primaryContainer: Color(0XFF081E91),
    scrim: Color(0XFF081E91),
    secondary: Color(0XFF081E91),
    secondaryContainer: Color(0XFF7B7B7B),
    shadow: Color(0XFF121212),
    surface: Color(0XFF081E91),
    surfaceTint: Color(0XFF121212),
    surfaceVariant: Color(0XFF7B7B7B),
    tertiary: Color(0XFF081E91),
    tertiaryContainer: Color(0XFF7B7B7B),
  );
}

/// Class containing custom colors for a primary theme.
class PrimaryColors {
  // Black
  Color get black900 => Color(0XFF000000);
  // BlueGray
  Color get blueGray100 => Color(0XFFD9D9D9);
  Color get blueGray200 => Color(0XFFADADB6);
  Color get blueGray400 => Color(0XFF888888);
  Color get blueGray50 => Color(0XFFF1F1F1);
  // DeepOrange
  Color get deepOrange300 => Color(0XFFF18A5C);
  // Gray
  Color get gray100 => Color(0XFFF2F3F5);
  Color get gray300 => Color(0XFFDDDDDD);
  Color get gray30001 => Color(0XFFE5E5E5);
  Color get gray400 => Color(0XFFAEAEAE);
  Color get gray50 => Color(0XFFF8F8F8);
  Color get gray500 => Color(0XFF949494);
  // GreenC
  Color get green100C6 => Color(0XC6C9EFC7);
  // Greend
  Color get green502d => Color(0X2DDBFED9);
  // GreenE
  Color get green800E5 => Color(0XE5297037);
  // Green
  Color get green900 => Color(0XFF184B22);
  // Indigo
  Color get indigo10019 => Color(0X19B7B7E5);
  Color get indigoA200 => Color(0XFF5865F2);
  // LightBlue
  Color get lightBlue300 => Color(0XFF5CCBF1);
  // LightGreen
  Color get lightGreenA200 => Color(0XFFB5EF6E);
  // Red
  Color get redA700 => Color(0XFFFF0000);
  // White
  Color get whiteA700 => Color(0XFFFFFFFF);
}

PrimaryColors get appTheme => ThemeHelper().themeColor();
ThemeData get theme => ThemeHelper().themeData();
